{"version":3,"file":"PSBackToSurvey.bundle.min.js","mappings":"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","sources":["webpack://padsquad_snippets/./src/PSBackToSurvey/PSBackToSurvey.js","webpack://padsquad_snippets/./src/PSDom.js","webpack://padsquad_snippets/./src/PSToolKit.js","webpack://padsquad_snippets/webpack/bootstrap","webpack://padsquad_snippets/webpack/runtime/define property getters","webpack://padsquad_snippets/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["/**\n * There are users that receive a preview link with the creative so they can see the placement\n * then do the test and must return back to the survey to continue with the marketing questions.\n *\n * The purpose of this plugin script is to render a button below the creative to let those users\n * that comes from a survey return back and continue with they survey.\n */\nimport { PSToolKit } from '../PSToolKit.js';\nimport { PSDom } from '../PSDom.js';\n\n((w) => {\n  /**\n   * Initialize the PSBackToSurvey script.\n   *\n   * @param {SimpliTag} SimpliTag The SimpliTag main object.\n   */\n  const PSBackToSurvey = function (SimpliTag) {\n    this.$config = {\n      params: {},\n      url: '',\n    };\n\n    /**\n     * This method takes a query string param from the window.top\n     * and use its value as future placeholder.\n     *\n     * @param {string} originalKeyName The name of the quey string param in the current window.top\n     * @param {string} targetKeyName The placeholder key name to hold the value.\n     * @returns {PSBackToSurvey}\n     */\n    this.take = function (originalKeyName, targetKeyName = '') {\n      if (!targetKeyName) {\n        targetKeyName = originalKeyName;\n      }\n\n      this.$config.params[originalKeyName] = targetKeyName;\n\n      return this;\n    };\n\n    /**\n     * Get the parameters taken from Query String\n     * that will be used in the final URL.\n     *\n     * @returns {Object<string, string>}\n     */\n    this.getParamsToUse = () => PSToolKit.queryString.only(Object.keys(this.$config.params));\n\n    /**\n     * Get the parameters to be set in the URL.\n     *\n     * @returns {Object<string, string>}\n     */\n    this.getParamsToBeSet = () => PSToolKit.placeholder.transform(this.$config.params, this.getParamsToUse());\n\n    /**\n     * Return the Final URL that will be opened.\n     * @returns {string}\n     */\n    this.getUrl = () => PSToolKit.placeholder.write(this.$config.url, this.getParamsToBeSet());\n\n    /**\n     * This method register a handler to open a new (_blank) window with the given URL\n     *\n     * NOTE:\n     * Please note the given URL could have placeholders in the form of {keyName}\n     * that could be used by the plugin and replaced with its final values at the end.\n     *\n     * @param {string} targetUrl The URL where to target when user click on the handler button.\n     * @returns {PSBackToSurvey}\n     */\n    this.url = function (targetUrl) {\n      this.$config.url = targetUrl;\n      return this;\n    };\n\n    /**\n     * Initialize the plugin in the browser.\n     *\n     * @param {string} id The ID of the script with the meta data.\n     * @returns {PSBackToSurvey}\n     */\n    this.start = function (id = '#PSBackToSurvey') {\n      console.log('PSBackToSurvey: START');\n\n      PSDom\n        .when(id)\n        .then((tag) => {\n          console.log('PSBackToSurvey: TAG READY');\n          // [STEP 1] Draw the button to be added\n          const button = PSDom.draw(`\n                        <button \n                            type=\"button\"\n                            style=\"\n                                display:none;\n                                width: 250px; \n                                height: 50px;\n                                margin: 40px 0 40px calc(50% - 125px); \n                                background-color: #5abf59; \n                                color: white;\n                                border: none;\n                                border-radius: 7px;\n                                font-size: 22px;\n                                font-weight: bold;\n                                font-family: sans-serif\n                                cursor: pointer;\n                                \"\n                        >\n                            ${tag.dataset.text ?? 'Return to Survey'}\n                        </button>\n                    `, {\n            hide() {\n\n              console.log('PSBackToSurvey: HIDE');\n\n              button.style.display = 'none';\n\n            },\n            show() {\n\n              console.log('PSBackToSurvey: DISPLAYED');\n\n              const placement = SimpliTag.vplacement();\n\n              const airInitHolder = placement.wrapper.firstChild\n\n              const adBreak = placement.wrapper.closest('.adBreak')\n\n              let unit = PSDom.outerHeight(airInitHolder) + PSDom.outerHeight(button)\n\n              adBreak.style.height = `${unit}px`\n\n              button.style.display = 'block';\n            },\n          });\n\n          // [STEP 2] Auto register placeholders\n          PSToolKit\n            .placeholder\n            .keys(tag.dataset.url)\n            .forEach((key) => this.take(key));\n\n          // [STEP 3] Auto register the target URL\n          this.url(tag.dataset.url);\n\n          // [STEP 4] Bind required events\n          button.addEventListener('click', () => {\n            window.open(this.getUrl(), '_blank');\n          });\n          // When at first load, if the creative is not visible, add a watcher event\n          // to know when the creative is visible and then show the button.\n          if (!(SimpliTag?.runtime()?.creative?.mainCreativeViewed ?? false)) {\n            SimpliTag.listeners.add(\n              'onStandardEventTracked',\n              function (event) {\n                if (event.label === 'main creative viewed') {\n                  button.show();\n                }\n              },\n            );\n          }\n          // If instead the creative is already visible, show the button ASAP.\n          else {\n            button.show();\n          }\n\n          // [STEP 5] - Draw in the wrapper\n          PSToolKit.insertAfter(SimpliTag.vplacement().wrapper.firstChild, button);\n        });\n\n      return this;\n    };\n  };\n\n  w.onload = function () {\n    /** @type {SimpliTag} */\n    const simpli = w.__simpli;\n\n    if (typeof simpli === 'undefined') {\n      throw new TypeError(\n        'PSBackToSurvey rely on Simpli Tag script. PLease include the required script first.',\n      );\n    }\n\n    if(!simpli?.runtime()?.environment?.isFriendlyIframe) {\n      console.warn('PSBackToSurvey is only available in friendly iframe.');\n      return this;\n    }\n\n    console.log('PSBackToSurvey: INIT');\n\n    w.PSBackToSurvey = (new PSBackToSurvey(simpli)).start();\n  };\n\n})(window);\n","export const PSDom = {\n  /**\n   * Get the element full height in pixels.\n   * (including margin, padding and border)\n   *\n   * @param {HTMLElement} element\n   * @returns {number}\n   */\n  outerHeight(element) {\n    const height = element.offsetHeight;\n\n    const marginTop = parseInt(element.style?.marginTop || 0) || 0;\n    const marginBottom = parseInt(element.style?.marginBottom || 0) || 0 ;\n    return (height + marginTop + marginBottom);\n  },\n  /**\n   * This method let you draw a string of HTML in to HTMLElement\n   *\n   * @param {string} html The HTML String\n   * @param {Object<string, Function>} bindings Custom bindings to be applied to the HTML Element.\n   * @returns {HTMLElement}\n   */\n  draw(html, bindings = {}) {\n    const template = document.createElement('template');\n    template.innerHTML = String(html).replace(/(\\r\\n|\\n|\\r)(\\s{2})+/gm, '');\n    Object\n      .keys(bindings)\n      .forEach((key) => {\n        template.content.firstChild[key] = bindings[key];\n      });\n    return template.content.firstChild;\n  },\n\n  /**\n   * Find a given DOMElement base on CSS selector or throw an exception.\n   *\n   * @param {string} selector HTML Selector\n   * @returns HTMLElement\n   */\n  findOrFail(selector) {\n    const element = this.find(selector);\n    if (!element) {\n      throw new DOMException(`No elements found for ${selector}.`);\n    }\n    return element;\n  },\n  /**\n   * Find a given HTMLElement in the DOM if exists.\n   *\n   * @param {string} selector CSS selector\n   * @returns HTMLElement\n   */\n  find(selector) {\n    return document.querySelector(selector);\n  },\n  /**\n   * Wait until a given selector is present in the DOM.\n   *\n   * @param {string} selector CSS selector.\n   * @returns Promise<HTMLElement>\n   */\n  when(selector) {\n    return new Promise((resolve, reject) => {\n      try {\n        const element = PSDom.findOrFail(selector);\n        resolve(element);\n      } catch {\n        const observer = new MutationObserver(() => {\n          const element = PSDom.find(selector);\n          if (!element) {\n            return;\n          }\n          observer.disconnect();\n          resolve(element);\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n      }\n    });\n  },\n};\n","const PSToolKit = {\n  queryString: {\n    /**\n     * @param {string[]} keys\n     * @returns {Object<string, string>}\n     */\n    only(keys) {\n      const params = new URLSearchParams(window.top.location.search ?? '');\n      return keys.reduce((collection, current) => {\n        collection[current] = params.get(current) ?? null;\n        return collection;\n      }, {});\n    },\n  },\n  placeholder: {\n\n    /**\n     * Set the placeholders in a given string.\n     *\n     * @example\n     * // Returns: Hello World\n     * PSToolKit.placeholder.write('Hello {name}', { \"name\": \"World\" })\n     *\n     * @param {string} text The text that contains the {holders}\n     * @param {Object<string,string>} placeholders The object with the placeholders to be used.\n     * @returns {string} The string with placeholders.\n     */\n    write(text, placeholders = {}) {\n      return Object\n        .keys(placeholders)\n        .reduce((t, key) => String(t).replace(/{[\\w]+}/gmi, placeholders[key] ?? ''), text);\n    },\n\n    /**\n     * Rename the keys of a given object of strings.\n     *\n     *  @example\n     * // Result: { first: \"value_1\", second: \"value_2 \"}\n     * PSToolKit.placeholder.transform({foo: \"first\", soo: \"second\"}, { foo: \"value_1\", soo: \"value_2 \"})\n     *\n     * @param {Object<string, string>} map\n     * @param {Object<string, string>} values\n     * @returns {Object<string,string>}\n     */\n    transform(map, values) {\n      return Object\n        .keys(map)\n        .reduce((output, key) => {\n          if (values[key]) {\n            output[map[key]] = values[key];\n          }\n          return output;\n        }, {});\n    },\n\n    /**\n     * This method takes a string and build an array of all keys withing curly braces\n     *\n     * @example\n     * // Result ['firstName', 'lastName']\n     * PSToolKit.placeholder.keys('Your name is {firstName} {lastName}')\n     *\n     * @param {string} characters The string to be evaluated\n     * @returns {string[]}\n     */\n    keys(characters) {\n      return (\n        String(characters)\n          .match(/({[a-zA-Z_-]+})/g)\n          .map((key) => key.replace(/([{}])/gi, '')) ?? []\n      );\n    },\n\n    /**\n     * Get a plain {object} with only the given keys.\n     *\n     * @param {Array} keys Keys to be taken from placeholders object.\n     * @param {Object} placeholders Plain object with all placeholders.\n     * @returns {Object<string, string>}\n     */\n    only(keys, placeholders) {\n      return keys.reduce((collection, current) => {\n        if (placeholders[current]) {\n          collection[current] = placeholders[current];\n        }\n        return collection;\n      }, {});\n    },\n  },\n\n  /**\n   * This method is responsible to draw a given HTMLElement after a given element.\n   *\n   * @param {HTMLElement} existingNode The target to draw after sibling target\n   * @param {HTMLElement} nodeToAdd Target element to put as sibling element\n   * @returns {HTMLElement} The parent node with the inserted sibling element.\n   */\n  insertAfter(existingNode, nodeToAdd) {\n    return existingNode.parentNode.insertBefore(\n      nodeToAdd,\n      existingNode.nextSibling,\n    );\n  },\n};\n\nexport { PSToolKit };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["w","PSBackToSurvey","PSDom","outerHeight","element","offsetHeight","parseInt","style","marginTop","marginBottom","draw","html","bindings","template","document","createElement","innerHTML","replace","Object","keys","forEach","key","content","firstChild","findOrFail","selector","this","find","DOMException","querySelector","when","Promise","resolve","c","observer","MutationObserver","disconnect","observe","body","childList","subtree","PSToolKit","queryString","only","params","URLSearchParams","window","top","location","search","reduce","collection","current","get","placeholder","write","text","placeholders","t","transform","map","values","output","characters","match","insertAfter","existingNode","nodeToAdd","parentNode","insertBefore","nextSibling","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","SimpliTag","$config","url","take","originalKeyName","targetKeyName","getParamsToUse","getParamsToBeSet","getUrl","targetUrl","start","id","then","tag","button","dataset","hide","display","show","placement","vplacement","airInitHolder","wrapper","adBreak","closest","unit","height","addEventListener","open","runtime","creative","mainCreativeViewed","listeners","add","event","label","onload","simpli","__simpli","TypeError","environment","isFriendlyIframe"],"sourceRoot":""}