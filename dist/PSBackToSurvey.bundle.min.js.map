{"version":3,"file":"PSBackToSurvey.bundle.min.js","mappings":"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","sources":["webpack://padsquad_snippets/./src/PSBackToSurvey/PSBackToSurvey.js","webpack://padsquad_snippets/./src/PSDom.js","webpack://padsquad_snippets/./src/PSToolKit.js","webpack://padsquad_snippets/webpack/bootstrap","webpack://padsquad_snippets/webpack/runtime/define property getters","webpack://padsquad_snippets/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["/**\n * There are users that receive a preview link with the creative so they can see the placement\n * then do the test and must return back to the survey to continue with the marketing questions.\n *\n * The purpose of this plugin script is to render a button below the creative to let those users\n * that comes from a survey return back and continue with they survey.\n */\nimport { PSToolKit } from '../PSToolKit.js';\nimport { PSDom } from '../PSDom.js';\n\n((w) => {\n  /**\n   * Initialize the PSBackToSurvey script.\n   *\n   * @param {SimpliTag} SimpliTag The SimpliTag main object.\n   */\n  const PSBackToSurvey = function (SimpliTag) {\n    this.$config = {\n      params: {},\n      url: '',\n    };\n\n    /**\n     * This method takes a query string param from the window.top\n     * and use its value as future placeholder.\n     *\n     * @param {string} originalKeyName The name of the quey string param in the current window.top\n     * @param {string} targetKeyName The placeholder key name to hold the value.\n     * @returns {PSBackToSurvey}\n     */\n    this.take = function (originalKeyName, targetKeyName) {\n      if (!targetKeyName) {\n        targetKeyName = originalKeyName;\n      }\n\n      this.$config.params[originalKeyName] = targetKeyName;\n\n      return this;\n    };\n\n    /**\n     * Get the parameters taken from Query String\n     * that will be used in the final URL.\n     *\n     * @returns {Object<string, string>}\n     */\n    this.getParamsToUse = () => PSToolKit.queryString.only(Object.keys(this.$config.params));\n\n    /**\n     * Get the parameters to be set in the URL.\n     *\n     * @returns {Object<string, string>}\n     */\n    this.getParamsToBeSet = () => PSToolKit.placeholder.transform(this.$config.params, this.getParamsToUse());\n\n    /**\n     * Return the Final URL that will be opened.\n     * @returns {string}\n     */\n    this.getUrl = () => PSToolKit.placeholder.write(this.$config.url, this.getParamsToBeSet());\n\n    /**\n     * This method register a handler to open a new (_blank) window with the given URL\n     *\n     * NOTE:\n     * Please note the given URL could have placeholders in the form of {keyName}\n     * that could be used by the plugin and replaced with its final values at the end.\n     *\n     * @param {string} targetUrl The URL where to target when user click on the handler button.\n     * @returns {PSBackToSurvey}\n     */\n    this.url = function (targetUrl) {\n      this.$config.url = targetUrl;\n      return this;\n    };\n\n    /**\n     * Initialize the plugin in the browser.\n     *\n     * @param {string} id The ID of the script with the meta data.\n     * @returns {void}\n     */\n    this.start = function (id = '#PSBackToSurvey') {\n\n      console.log('PSBackToSurvey: START');\n\n      PSDom\n        .when(id)\n        .then((tag) => {\n          console.log('PSBackToSurvey: TAG READY');\n          // [STEP 1] Draw the button to be added\n          const button = PSDom.draw(`\n                        <button \n                            type=\"button\"\n                            style=\"\n                                display:none;\n                                width: 250px; \n                                height: 50px;\n                                margin: 40px 0; \n                                margin-left: calc(50% - 125px); \n                                background-color: #5abf59; \n                                color:white;\n                                border:none;\n                                border-radius: 7px;\n                                font-size: 22px;\n                                font-weight: bold;\n                                font-family: sans-serif\n                                \"\n                        >\n                            ${tag.dataset.text ?? 'Return to Survey'}\n                        </button>\n                    `);\n\n          // [STEP 2] Auto register placeholders\n          PSToolKit\n            .placeholder\n            .keys(tag.dataset.url)\n            .forEach((key) => this.take(key));\n\n          // [STEP 3] Auto register the target URL\n          this.url(tag.dataset.url);\n\n          // [STEP 4] Bind required events\n          button.addEventListener('click', () => {\n            window.open(this.getUrl(), '_blank');\n          });\n\n          SimpliTag.listeners.add(\n            'onStandardEventTracked',\n            function (event) {\n              if (event.label === 'main creative viewed') {\n                console.log('PSBackToSurvey: DISPLAYED');\n                button.style.display = 'block';\n              }\n            },\n          );\n\n          // [STEP 5] - Draw in the wrapper\n          PSToolKit.insertAfter(SimpliTag.vplacement().wrapper, button);\n        });\n      return this;\n    };\n  };\n\n  w.onload = function () {\n    console.log('PSBackToSurvey: MAKE');\n    const simpli = w.__simpli;\n\n    if (typeof simpli === 'undefined') {\n      throw new TypeError(\n        'PSBackToSurvey rely on Simpli Tag script. PLease include the required script first.',\n      );\n    }\n\n    (new PSBackToSurvey(simpli)).start();\n  };\n\n})(window);\n","export const PSDom = {\n\n  /**\n   * This method let you draw a string of HTML in to HTMLElement\n   *\n   * @param {string} html The HTML String\n   * @returns {HTMLElement}\n   */\n  draw(html) {\n    const template = document.createElement('template');\n    template.innerHTML = String(html).replace(/(\\r\\n|\\n|\\r)(\\s{2})+/gm, '');\n\n    return template.content.firstChild;\n  },\n\n  /**\n   * Find a given DOMElement base on CSS selector or throw an exception.\n   *\n   * @param {string} selector HTML Selector\n   * @returns HTMLElement\n   */\n  findOrFail(selector) {\n    const element = this.find(selector);\n    if (!element) {\n      throw new DOMException(`No elements found for ${selector}.`);\n    }\n    return element;\n  },\n  /**\n   * Find a given HTMLElement in the DOM if exists.\n   *\n   * @param {string} selector CSS selector\n   * @returns HTMLElement\n   */\n  find(selector) {\n    return document.querySelector(selector);\n  },\n  /**\n   * Wait until a given selector is present in the DOM.\n   *\n   * @param {string} selector CSS selector.\n   * @returns Promise<HTMLElement>\n   */\n  when(selector) {\n    return new Promise((resolve, reject) => {\n      try {\n        const element = PSDom.findOrFail(selector);\n        resolve(element);\n      } catch {\n        const observer = new MutationObserver(() => {\n          const element = PSDom.find(selector);\n          if (!element) {\n            return;\n          }\n          observer.disconnect()\n          resolve(element);\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n      }\n    });\n  },\n};\n","const PSToolKit = {\n  queryString: {\n    /**\n     * @param {string[]} keys\n     * @returns {Object<string, string>}\n     */\n    only(keys) {\n      const params = new URLSearchParams(window.top.location.search ?? '');\n      return keys.reduce((collection, current) => {\n        collection[current] = params.get(current) ?? null;\n        return collection;\n      }, {});\n    },\n  },\n  placeholder: {\n\n    /**\n     * Set the placeholders in a given string.\n     *\n     * @example\n     * // Returns: Hello World\n     * PSToolKit.placeholder.write('Hello {name}', { \"name\": \"World\" })\n     *\n     * @param {string} text The text that contains the {holders}\n     * @param {Object<string,string>} placeholders The object with the placeholders to be used.\n     * @returns {string} The string with placeholders.\n     */\n    write(text, placeholders = {}) {\n      return Object\n        .keys(placeholders)\n        .reduce((t, key) => String(t).replace(/{[\\w]+}/gmi, placeholders[key] ?? ''), text);\n    },\n\n    /**\n     * Rename the keys of a given object of strings.\n     *\n     *  @example\n     * // Result: { first: \"value_1\", second: \"value_2 \"}\n     * PSToolKit.placeholder.transform({foo: \"first\", soo: \"second\"}, { foo: \"value_1\", soo: \"value_2 \"})\n     *\n     * @param {Object<string, string>} map\n     * @param {Object<string, string>} values\n     * @returns {Object<string,string>}\n     */\n    transform(map, values) {\n      return Object\n        .keys(map)\n        .reduce((output, key) => {\n          if (values[key]) {\n            output[map[key]] = values[key];\n          }\n          return output;\n        }, {});\n    },\n\n    /**\n     * This method takes a string and build an array of all keys withing curly braces\n     *\n     * @example\n     * // Result ['firstName', 'lastName']\n     * PSToolKit.placeholder.keys('Your name is {firstName} {lastName}')\n     *\n     * @param {string} characters The string to be evaluated\n     * @returns {string[]}\n     */\n    keys(characters) {\n      return (\n        String(characters)\n          .match(/({[a-zA-Z_-]+})/g)\n          .map((key) => key.replace(/([{}])/gi, '')) ?? []\n      );\n    },\n\n    /**\n     * Get a plain {object} with only the given keys.\n     *\n     * @param {Array} keys Keys to be taken from placeholders object.\n     * @param {Object} placeholders Plain object with all placeholders.\n     * @returns {Object<string, string>}\n     */\n    only(keys, placeholders) {\n      return keys.reduce((collection, current) => {\n        if (placeholders[current]) {\n          collection[current] = placeholders[current];\n        }\n        return collection;\n      }, {});\n    },\n  },\n\n  /**\n   * This method is responsible to draw a given HTMLElement after a given element.\n   *\n   * @param {HTMLElement} existingNode The target to draw after sibling target\n   * @param {HTMLElement} nodeToAdd Target element to put as sibling element\n   * @returns {HTMLElement} The parent node with the inserted sibling element.\n   */\n  insertAfter(existingNode, nodeToAdd) {\n    return existingNode.parentNode.insertBefore(\n      nodeToAdd,\n      existingNode.nextSibling,\n    );\n  },\n};\n\nexport { PSToolKit };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["w","PSBackToSurvey","PSDom","draw","html","template","document","createElement","innerHTML","replace","content","firstChild","findOrFail","selector","element","this","find","DOMException","querySelector","when","Promise","resolve","c","observer","MutationObserver","disconnect","observe","body","childList","subtree","PSToolKit","queryString","only","keys","params","URLSearchParams","window","top","location","search","reduce","collection","current","get","placeholder","write","text","placeholders","Object","t","key","transform","map","values","output","characters","match","insertAfter","existingNode","nodeToAdd","parentNode","insertBefore","nextSibling","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","SimpliTag","$config","url","take","originalKeyName","targetKeyName","getParamsToUse","getParamsToBeSet","getUrl","targetUrl","start","id","then","tag","button","dataset","forEach","addEventListener","open","listeners","add","event","label","style","display","vplacement","wrapper","onload","simpli","__simpli","TypeError"],"sourceRoot":""}