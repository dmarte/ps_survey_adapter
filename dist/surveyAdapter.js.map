{"version":3,"file":"surveyAdapter.js","mappings":"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","sources":["webpack://padsquad_snippets/./src/PSToolKit.js","webpack://padsquad_snippets/./src/surveyAdapter.js","webpack://padsquad_snippets/./src/PSDom.js"],"sourcesContent":["const PSToolKit = {\n  queryString: {\n    /**\n     * @param {string[]} keys\n     * @returns {Object<string, string>}\n     */\n    only(keys) {\n      const params = new URLSearchParams(window.top.location.search ?? \"\");\n      return keys.reduce((collection, current) => {\n        collection[current] = params.get(current) ?? null;\n        return collection;\n      }, {});\n    },\n  },\n  placeholder: {\n    /**\n     * Set the placeholders in a given string.\n     *\n     * @example\n     * // Returns: Hello World\n     * PSToolKit.placeholder.write('Hello {name}', { \"name\": \"World\" })\n     *\n     * @param {string} text The text that contains the {holders}\n     * @param {Object<string,string>} placeholders The object with the placeholders to be used.\n     * @returns {string} The string with placeholders.\n     */\n    write(text, placeholders = {}) {\n      return Object.keys(placeholders)?.reduce(\n        (t, key) =>\n          String(t).replace(\n            new RegExp(`{${key}}`, \"g\"),\n            placeholders[key] ?? \"\"\n          ),\n        text\n      );\n    },\n\n    /**\n     * Rename the keys of a given object of strings.\n     *\n     *  @example\n     * // Result: { first: \"value_1\", second: \"value_2 \"}\n     * PSToolKit.placeholder.transform({foo: \"first\", soo: \"second\"}, { foo: \"value_1\", soo: \"value_2 \"})\n     *\n     * @param {Object<string, string>} map\n     * @param {Object<string, string>} values\n     * @returns {Object<string,string>}\n     */\n    transform(map, values) {\n      return Object.keys(map).reduce((output, key) => {\n        if (values[key]) {\n          output[map[key]] = values[key];\n        }\n        return output;\n      }, {});\n    },\n\n    /**\n     * This method takes a string and build an array of all keys withing curly braces\n     *\n     * @example\n     * // Result ['firstName', 'lastName']\n     * PSToolKit.placeholder.keys('Your name is {firstName} {lastName}')\n     *\n     * @param {string} characters The string to be evaluated\n     * @returns {string[]}\n     */\n    keys(characters) {\n      const match = String(characters).match(/({[a-zA-Z_-]+})/g);\n\n      if (!Array.isArray(match)) {\n        return [];\n      }\n\n      return match?.map((key) => key.replace(/([{}])/gi, \"\")) ?? [];\n    },\n\n    /**\n     * Get a plain {object} with only the given keys.\n     *\n     * @param {Array} keys Keys to be taken from placeholders object.\n     * @param {Object} placeholders Plain object with all placeholders.\n     * @returns {Object<string, string>}\n     */\n    only(keys, placeholders) {\n      return keys.reduce((collection, current) => {\n        if (placeholders[current]) {\n          collection[current] = placeholders[current];\n        }\n        return collection;\n      }, {});\n    },\n  },\n\n  /**\n   * This method is responsible to draw a given HTMLElement after a given element.\n   *\n   * @param {HTMLElement} existingNode The target to draw after sibling target\n   * @param {HTMLElement} nodeToAdd Target element to put as sibling element\n   * @returns {HTMLElement} The parent node with the inserted sibling element.\n   */\n  insertAfter(existingNode, nodeToAdd) {\n    return existingNode.parentNode.insertBefore(\n      nodeToAdd,\n      existingNode.nextSibling\n    );\n  },\n};\n\nexport { PSToolKit };\n","/**\n * There are users that receive a preview link with the creative so they can see the placement\n * then do the test and must return back to the survey to continue with the marketing questions.\n *\n * The purpose of this plugin script is to render a button below the creative to let those users\n * that comes from a survey return back and continue with they survey.\n */\nimport { PSToolKit } from './PSToolKit.js';\nimport { PSDom } from './PSDom.js';\n\n((w) => {\n  /**\n   * Initialize the SurveyAdapter script.\n   *\n   * @param {SimpliTag} SimpliTag The SimpliTag main object.\n   */\n  const SurveyAdapter = function (SimpliTag) {\n    this.$config = {\n      params: {},\n      url: '',\n    };\n\n    /**\n     * This method takes a query string param from the window.top\n     * and use its value as future placeholder.\n     *\n     * @param {string} originalKeyName The name of the quey string param in the current window.top\n     * @param {string} targetKeyName The placeholder key name to hold the value.\n     * @returns {SurveyAdapter}\n     */\n    this.take = function (originalKeyName, targetKeyName = '') {\n      if (!targetKeyName) {\n        targetKeyName = originalKeyName;\n      }\n\n      this.$config.params[originalKeyName] = targetKeyName;\n\n      return this;\n    };\n\n    /**\n     * Get the parameters taken from Query String\n     * that will be used in the final URL.\n     *\n     * @returns {Object<string, string>}\n     */\n    this.getParamsToUse = () =>\n      PSToolKit.queryString.only(Object.keys(this.$config.params));\n\n    /**\n     * Get the parameters to be set in the URL.\n     *\n     * @returns {Object<string, string>}\n     */\n    this.getParamsToBeSet = () =>\n      PSToolKit.placeholder.transform(\n        this.$config.params,\n        this.getParamsToUse(),\n      );\n\n    /**\n     * Return the Final URL that will be opened.\n     * @returns {string}\n     */\n    this.getUrl = () =>\n      PSToolKit.placeholder.write(this.$config.url, this.getParamsToBeSet());\n\n    /**\n     * This method register a handler to open a new (_blank) window with the given URL\n     *\n     * NOTE:\n     * Please note the given URL could have placeholders in the form of {keyName}\n     * that could be used by the plugin and replaced with its final values at the end.\n     *\n     * @param {string} targetUrl The URL where to target when user click on the handler button.\n     * @returns {SurveyAdapter}\n     */\n    this.url = function (targetUrl) {\n      this.$config.url = targetUrl;\n      return this;\n    };\n\n    /**\n     * Initialize the plugin in the browser.\n     *\n     * @param {string} id The ID of the script with the meta data.\n     * @returns {SurveyAdapter}\n     */\n    this.start = function (id = '#SurveyAdapter') {\n      console.log('SurveyAdapter: START');\n\n      PSDom.when(id).then((tag) => {\n        console.log('SurveyAdapter: TAG READY');\n        console.log('SurveyAdapter: IS FLOATING?', PSDom.enabled(tag, 'floating'));\n        // [STEP 1] Draw the button to be added\n        const button = PSDom.draw(\n          `\n                        <button \n                            type=\"button\"\n                            style=\"\n                                display:none;\n                                width: 250px; \n                                height: 50px;\n                                margin: 40px 0 40px calc(50% - 125px); \n                                background-color: #5abf59; \n                                color: white;\n                                border: none;\n                                border-radius: 7px;\n                                font-size: 22px;\n                                font-weight: bold;\n                                font-family: sans-serif;\n                                cursor: pointer;\n                                \"\n                        >\n                            ${tag.dataset.text ?? 'Return to Survey'}\n                        </button>\n                    `,\n          {\n            renderOnFloating(placement) {\n              PSToolKit.insertAfter(\n                placement.wrapper.firstChild,\n                button,\n              );\n            },\n            renderOnGeneric(placement) {\n              PSToolKit.insertAfter(\n                placement.wrapper.firstChild,\n                button,\n              );\n            },\n            showOnGeneric(placement) {\n\n              console.log('SurveyAdapter: DISPLAYED ON GENERIC');\n\n              const airInitHolder = placement.wrapper.firstChild;\n\n              const adBreak = placement.wrapper.closest('.adBreak');\n\n              let unit =\n                PSDom.outerHeight(airInitHolder) + PSDom.outerHeight(button);\n\n              adBreak.style.height = `${unit}px`;\n\n              button.style.display = 'block';\n            },\n            /**\n             * Show the button when ads is on floating mode.\n             * @param {SimpliPlacement} _\n             */\n            showOnFloating(_) {\n\n              console.log('SurveyAdapter: DISPLAYED ON FLOATING');\n\n              button.style.position = 'fixed'\n              button.style.top = '16px'\n              button.style.left = 'calc(50% - 50%)'\n              button.style.boxShadow = '1px 5px 8px rgb(0 0 0 / 44%)'\n              button.style.display = 'block'\n              button.style.zIndex = '100000'\n            },\n            show() {\n              console.log('SurveyAdapter: STARTING TO SHOW')\n\n              if (PSDom.enabled(tag, 'floating')) {\n                this.showOnFloating(SimpliTag.vplacement());\n              } else {\n                this.showOnGeneric(SimpliTag.vplacement());\n              }\n            },\n          },\n        );\n\n        if (!tag.dataset.target) {\n          throw new TypeError(\n            'SurveyAdapter you need to specify the \"data-target\" attribute in the script tag to use this adapter.',\n          );\n        }\n\n        const path = String(tag?.dataset?.target ?? '');\n        // [STEP 2] Auto register placeholders\n        PSToolKit.placeholder.keys(path).forEach((key) => this.take(key));\n\n        // [STEP 3] Auto register the target URL\n        this.url(path);\n\n        // [STEP 4] Bind required events\n        button.addEventListener('click', () => {\n          window.open(this.getUrl(), '_blank');\n        });\n\n        // [STEP 5] - Draw in the wrapper\n        if (PSDom.enabled(tag, 'floating')) {\n          button.renderOnFloating(SimpliTag.vplacement());\n        } else {\n          button.renderOnGeneric(SimpliTag.vplacement());\n        }\n\n        // [STEP 6] - Show when ready\n        // When at first load, if the creative is not visible, add a watcher event\n        // to know when the creative is visible and then show the button.\n        if (!(SimpliTag.runtime().creative.mainCreativeViewed ?? false)) {\n\n          SimpliTag.listeners.add('onStandardEventTracked', function (event) {\n            const floating = PSDom.enabled(tag, 'floating')\n            if (\n              // On not floating Scrollers / Tiles\n              (event.label === 'main creative viewed' && !floating) ||\n              // On on floating Adhesion\n              (event.label === 'creative rendered' && floating)\n            ) {\n              console.log('SurveyAdapter: SIMPLI EVENT ', event.label)\n              button.show();\n            }\n          });\n\n          return this;\n        }\n        console.log('SurveyAdapter: Always visible')\n        // If instead the creative is already visible, show the button ASAP.\n        button.show();\n      });\n\n      return this;\n    };\n  };\n\n  w.onload = function () {\n    /** @type {SimpliTag} */\n    const simpli = w.__simpli;\n\n    if (typeof simpli === 'undefined') {\n      throw new TypeError(\n        'SurveyAdapter rely on Simpli Tag script. PLease include the required script first.',\n      );\n    }\n\n    if (!simpli?.runtime()?.environment?.isFriendlyIframe) {\n      console.warn('SurveyAdapter is only available in friendly iframe.');\n      return this;\n    }\n\n    console.log('SurveyAdapter: INIT');\n\n    w.SurveyAdapter = new SurveyAdapter(simpli).start();\n  };\n})(window);\n","export const PSDom = {\n  /**\n   * Verify the boolean form of a given data attribute.\n   * @example PSDom.enabled(PSDom.draw(`<button data-active=\"true\">Button</button>`), 'active')\n   * @param {HTMLElement} element\n   * @param {string} attribute\n   * @return {boolean}\n   */\n  enabled(element, attribute) {\n    if(!element.dataset[attribute]) {\n      return false\n    }\n    return element.dataset[attribute] === 'true' || element.dataset[attribute] === '1'\n  },\n  /**\n   * Get the element full height in pixels.\n   * (including margin, padding and border)\n   *\n   * @param {HTMLElement} element\n   * @returns {number}\n   */\n  outerHeight(element) {\n    const height = element.offsetHeight;\n\n    const marginTop = parseInt(element.style?.marginTop || 0) || 0;\n    const marginBottom = parseInt(element.style?.marginBottom || 0) || 0 ;\n    return (height + marginTop + marginBottom);\n  },\n  /**\n   * This method let you draw a string of HTML in to HTMLElement\n   *\n   * @param {string} html The HTML String\n   * @param {Object<string, Function>} bindings Custom bindings to be applied to the HTML Element.\n   * @returns {HTMLElement}\n   */\n  draw(html, bindings = {}) {\n    const template = document.createElement('template');\n    template.innerHTML = String(html).replace(/(\\r\\n|\\n|\\r)(\\s{2})+/gm, '');\n    Object\n      .keys(bindings)\n      .forEach((key) => {\n        template.content.firstChild[key] = bindings[key];\n      });\n    return template.content.firstChild;\n  },\n\n  /**\n   * Find a given DOMElement base on CSS selector or throw an exception.\n   *\n   * @param {string} selector HTML Selector\n   * @returns HTMLElement\n   */\n  findOrFail(selector) {\n    const element = this.find(selector);\n    if (!element) {\n      throw new DOMException(`No elements found for ${selector}.`);\n    }\n    return element;\n  },\n  /**\n   * Find a given HTMLElement in the DOM if exists.\n   *\n   * @param {string} selector CSS selector\n   * @returns HTMLElement\n   */\n  find(selector) {\n    return document.querySelector(selector);\n  },\n  /**\n   * Wait until a given selector is present in the DOM.\n   *\n   * @param {string} selector CSS selector.\n   * @returns Promise<HTMLElement>\n   */\n  when(selector) {\n    return new Promise((resolve, reject) => {\n      try {\n        const element = PSDom.findOrFail(selector);\n        resolve(element);\n      } catch {\n        const observer = new MutationObserver(() => {\n          const element = PSDom.find(selector);\n          if (!element) {\n            return;\n          }\n          observer.disconnect();\n          resolve(element);\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n      }\n    });\n  },\n};\n"],"names":["w","SurveyAdapter","PSToolKit","keys","params","URLSearchParams","window","top","location","search","reduce","collection","current","get","text","placeholders","Object","t","key","replace","RegExp","map","values","output","characters","match","Array","isArray","existingNode","nodeToAdd","parentNode","insertBefore","nextSibling","PSDom","enabled","element","attribute","dataset","outerHeight","offsetHeight","parseInt","style","marginTop","marginBottom","draw","html","bindings","template","document","createElement","innerHTML","forEach","content","firstChild","findOrFail","selector","this","find","DOMException","querySelector","when","Promise","resolve","c","observer","MutationObserver","disconnect","observe","body","childList","subtree","SimpliTag","$config","url","take","originalKeyName","targetKeyName","getParamsToUse","getParamsToBeSet","getUrl","targetUrl","start","id","then","tag","button","renderOnFloating","placement","wrapper","renderOnGeneric","showOnGeneric","airInitHolder","adBreak","closest","unit","height","display","showOnFloating","position","left","boxShadow","zIndex","show","vplacement","target","TypeError","path","addEventListener","open","runtime","creative","mainCreativeViewed","listeners","add","event","floating","label","onload","simpli","__simpli","environment","isFriendlyIframe"],"sourceRoot":""}