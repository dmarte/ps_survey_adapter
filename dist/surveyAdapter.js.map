{"version":3,"file":"surveyAdapter.js","mappings":"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","sources":["webpack://padsquad_snippets/./src/PSToolKit.js","webpack://padsquad_snippets/./src/SurveyAdapter.js","webpack://padsquad_snippets/./src/PSDom.js"],"sourcesContent":["const PSToolKit = {\n  queryString: {\n    /**\n     * @param {string[]} keys\n     * @returns {Object<string, string>}\n     */\n    only(keys) {\n      const params = new URLSearchParams(window.top.location.search ?? '');\n      return keys.reduce((collection, current) => {\n        collection[current] = params.get(current) ?? null;\n        return collection;\n      }, {});\n    },\n  },\n  placeholder: {\n\n    /**\n     * Set the placeholders in a given string.\n     *\n     * @example\n     * // Returns: Hello World\n     * PSToolKit.placeholder.write('Hello {name}', { \"name\": \"World\" })\n     *\n     * @param {string} text The text that contains the {holders}\n     * @param {Object<string,string>} placeholders The object with the placeholders to be used.\n     * @returns {string} The string with placeholders.\n     */\n    write(text, placeholders = {}) {\n      return Object\n        .keys(placeholders)\n        .reduce((t, key) => String(t).replace(/{[\\w]+}/gmi, placeholders[key] ?? ''), text);\n    },\n\n    /**\n     * Rename the keys of a given object of strings.\n     *\n     *  @example\n     * // Result: { first: \"value_1\", second: \"value_2 \"}\n     * PSToolKit.placeholder.transform({foo: \"first\", soo: \"second\"}, { foo: \"value_1\", soo: \"value_2 \"})\n     *\n     * @param {Object<string, string>} map\n     * @param {Object<string, string>} values\n     * @returns {Object<string,string>}\n     */\n    transform(map, values) {\n      return Object\n        .keys(map)\n        .reduce((output, key) => {\n          if (values[key]) {\n            output[map[key]] = values[key];\n          }\n          return output;\n        }, {});\n    },\n\n    /**\n     * This method takes a string and build an array of all keys withing curly braces\n     *\n     * @example\n     * // Result ['firstName', 'lastName']\n     * PSToolKit.placeholder.keys('Your name is {firstName} {lastName}')\n     *\n     * @param {string} characters The string to be evaluated\n     * @returns {string[]}\n     */\n    keys(characters) {\n      return (\n        String(characters)\n          .match(/({[a-zA-Z_-]+})/g)\n          .map((key) => key.replace(/([{}])/gi, '')) ?? []\n      );\n    },\n\n    /**\n     * Get a plain {object} with only the given keys.\n     *\n     * @param {Array} keys Keys to be taken from placeholders object.\n     * @param {Object} placeholders Plain object with all placeholders.\n     * @returns {Object<string, string>}\n     */\n    only(keys, placeholders) {\n      return keys.reduce((collection, current) => {\n        if (placeholders[current]) {\n          collection[current] = placeholders[current];\n        }\n        return collection;\n      }, {});\n    },\n  },\n\n  /**\n   * This method is responsible to draw a given HTMLElement after a given element.\n   *\n   * @param {HTMLElement} existingNode The target to draw after sibling target\n   * @param {HTMLElement} nodeToAdd Target element to put as sibling element\n   * @returns {HTMLElement} The parent node with the inserted sibling element.\n   */\n  insertAfter(existingNode, nodeToAdd) {\n    return existingNode.parentNode.insertBefore(\n      nodeToAdd,\n      existingNode.nextSibling,\n    );\n  },\n};\n\nexport { PSToolKit };\n","/**\n * There are users that receive a preview link with the creative so they can see the placement\n * then do the test and must return back to the survey to continue with the marketing questions.\n *\n * The purpose of this plugin script is to render a button below the creative to let those users\n * that comes from a survey return back and continue with they survey.\n */\nimport { PSToolKit } from './PSToolKit.js';\nimport { PSDom } from './PSDom.js';\n\n((w) => {\n  /**\n   * Initialize the SurveyAdapter script.\n   *\n   * @param {SimpliTag} SimpliTag The SimpliTag main object.\n   */\n  const SurveyAdapter = function (SimpliTag) {\n    this.$config = {\n      params: {},\n      url: '',\n    };\n\n    /**\n     * This method takes a query string param from the window.top\n     * and use its value as future placeholder.\n     *\n     * @param {string} originalKeyName The name of the quey string param in the current window.top\n     * @param {string} targetKeyName The placeholder key name to hold the value.\n     * @returns {SurveyAdapter}\n     */\n    this.take = function (originalKeyName, targetKeyName = '') {\n      if (!targetKeyName) {\n        targetKeyName = originalKeyName;\n      }\n\n      this.$config.params[originalKeyName] = targetKeyName;\n\n      return this;\n    };\n\n    /**\n     * Get the parameters taken from Query String\n     * that will be used in the final URL.\n     *\n     * @returns {Object<string, string>}\n     */\n    this.getParamsToUse = () => PSToolKit.queryString.only(Object.keys(this.$config.params));\n\n    /**\n     * Get the parameters to be set in the URL.\n     *\n     * @returns {Object<string, string>}\n     */\n    this.getParamsToBeSet = () => PSToolKit.placeholder.transform(this.$config.params, this.getParamsToUse());\n\n    /**\n     * Return the Final URL that will be opened.\n     * @returns {string}\n     */\n    this.getUrl = () => PSToolKit.placeholder.write(this.$config.url, this.getParamsToBeSet());\n\n    /**\n     * This method register a handler to open a new (_blank) window with the given URL\n     *\n     * NOTE:\n     * Please note the given URL could have placeholders in the form of {keyName}\n     * that could be used by the plugin and replaced with its final values at the end.\n     *\n     * @param {string} targetUrl The URL where to target when user click on the handler button.\n     * @returns {SurveyAdapter}\n     */\n    this.url = function (targetUrl) {\n      this.$config.url = targetUrl;\n      return this;\n    };\n\n    /**\n     * Initialize the plugin in the browser.\n     *\n     * @param {string} id The ID of the script with the meta data.\n     * @returns {SurveyAdapter}\n     */\n    this.start = function (id = '#SurveyAdapter') {\n      console.log('SurveyAdapter: START');\n\n      PSDom\n        .when(id)\n        .then((tag) => {\n          console.log('SurveyAdapter: TAG READY');\n          // [STEP 1] Draw the button to be added\n          const button = PSDom.draw(`\n                        <button \n                            type=\"button\"\n                            style=\"\n                                display:none;\n                                width: 250px; \n                                height: 50px;\n                                margin: 40px 0 40px calc(50% - 125px); \n                                background-color: #5abf59; \n                                color: white;\n                                border: none;\n                                border-radius: 7px;\n                                font-size: 22px;\n                                font-weight: bold;\n                                font-family: sans-serif\n                                cursor: pointer;\n                                \"\n                        >\n                            ${tag.dataset.text ?? 'Return to Survey'}\n                        </button>\n                    `, {\n            hide() {\n\n              console.log('SurveyAdapter: HIDE');\n\n              button.style.display = 'none';\n\n            },\n            show() {\n\n              console.log('SurveyAdapter: DISPLAYED');\n\n              const placement = SimpliTag.vplacement();\n\n              const airInitHolder = placement.wrapper.firstChild\n\n              const adBreak = placement.wrapper.closest('.adBreak')\n\n              let unit = PSDom.outerHeight(airInitHolder) + PSDom.outerHeight(button)\n\n              adBreak.style.height = `${unit}px`\n\n              button.style.display = 'block';\n            },\n          });\n\n          // [STEP 2] Auto register placeholders\n          PSToolKit\n            .placeholder\n            .keys(tag.dataset.url)\n            .forEach((key) => this.take(key));\n\n          // [STEP 3] Auto register the target URL\n          this.url(tag.dataset.url);\n\n          // [STEP 4] Bind required events\n          button.addEventListener('click', () => {\n            window.open(this.getUrl(), '_blank');\n          });\n          // When at first load, if the creative is not visible, add a watcher event\n          // to know when the creative is visible and then show the button.\n          if (!(SimpliTag?.runtime()?.creative?.mainCreativeViewed ?? false)) {\n            SimpliTag.listeners.add(\n              'onStandardEventTracked',\n              function (event) {\n                if (event.label === 'main creative viewed') {\n                  button.show();\n                }\n              },\n            );\n          }\n          // If instead the creative is already visible, show the button ASAP.\n          else {\n            button.show();\n          }\n\n          // [STEP 5] - Draw in the wrapper\n          PSToolKit.insertAfter(SimpliTag.vplacement().wrapper.firstChild, button);\n        });\n\n      return this;\n    };\n  };\n\n  w.onload = function () {\n    /** @type {SimpliTag} */\n    const simpli = w.__simpli;\n\n    if (typeof simpli === 'undefined') {\n      throw new TypeError(\n        'SurveyAdapter rely on Simpli Tag script. PLease include the required script first.',\n      );\n    }\n\n    if(!simpli?.runtime()?.environment?.isFriendlyIframe) {\n      console.warn('SurveyAdapter is only available in friendly iframe.');\n      return this;\n    }\n\n    console.log('SurveyAdapter: INIT');\n\n    w.PSBackToSurvey = (new SurveyAdapter(simpli)).start();\n  };\n\n})(window);\n","export const PSDom = {\n  /**\n   * Get the element full height in pixels.\n   * (including margin, padding and border)\n   *\n   * @param {HTMLElement} element\n   * @returns {number}\n   */\n  outerHeight(element) {\n    const height = element.offsetHeight;\n\n    const marginTop = parseInt(element.style?.marginTop || 0) || 0;\n    const marginBottom = parseInt(element.style?.marginBottom || 0) || 0 ;\n    return (height + marginTop + marginBottom);\n  },\n  /**\n   * This method let you draw a string of HTML in to HTMLElement\n   *\n   * @param {string} html The HTML String\n   * @param {Object<string, Function>} bindings Custom bindings to be applied to the HTML Element.\n   * @returns {HTMLElement}\n   */\n  draw(html, bindings = {}) {\n    const template = document.createElement('template');\n    template.innerHTML = String(html).replace(/(\\r\\n|\\n|\\r)(\\s{2})+/gm, '');\n    Object\n      .keys(bindings)\n      .forEach((key) => {\n        template.content.firstChild[key] = bindings[key];\n      });\n    return template.content.firstChild;\n  },\n\n  /**\n   * Find a given DOMElement base on CSS selector or throw an exception.\n   *\n   * @param {string} selector HTML Selector\n   * @returns HTMLElement\n   */\n  findOrFail(selector) {\n    const element = this.find(selector);\n    if (!element) {\n      throw new DOMException(`No elements found for ${selector}.`);\n    }\n    return element;\n  },\n  /**\n   * Find a given HTMLElement in the DOM if exists.\n   *\n   * @param {string} selector CSS selector\n   * @returns HTMLElement\n   */\n  find(selector) {\n    return document.querySelector(selector);\n  },\n  /**\n   * Wait until a given selector is present in the DOM.\n   *\n   * @param {string} selector CSS selector.\n   * @returns Promise<HTMLElement>\n   */\n  when(selector) {\n    return new Promise((resolve, reject) => {\n      try {\n        const element = PSDom.findOrFail(selector);\n        resolve(element);\n      } catch {\n        const observer = new MutationObserver(() => {\n          const element = PSDom.find(selector);\n          if (!element) {\n            return;\n          }\n          observer.disconnect();\n          resolve(element);\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n      }\n    });\n  },\n};\n"],"names":["w","SurveyAdapter","PSToolKit","keys","params","URLSearchParams","window","top","location","search","reduce","collection","current","get","text","placeholders","Object","t","key","replace","map","values","output","characters","match","existingNode","nodeToAdd","parentNode","insertBefore","nextSibling","PSDom","outerHeight","element","offsetHeight","parseInt","style","marginTop","marginBottom","draw","html","bindings","template","document","createElement","innerHTML","forEach","content","firstChild","findOrFail","selector","this","find","DOMException","querySelector","when","Promise","resolve","c","observer","MutationObserver","disconnect","observe","body","childList","subtree","SimpliTag","$config","url","take","originalKeyName","targetKeyName","getParamsToUse","getParamsToBeSet","getUrl","targetUrl","start","id","then","tag","button","dataset","hide","display","show","placement","vplacement","airInitHolder","wrapper","adBreak","closest","unit","height","addEventListener","open","runtime","creative","mainCreativeViewed","listeners","add","event","label","onload","simpli","__simpli","TypeError","environment","isFriendlyIframe","PSBackToSurvey"],"sourceRoot":""}